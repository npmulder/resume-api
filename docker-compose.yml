version: '3.8'

services:
  # Resume API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: resume-api
    environment:
      RESUME_API_ENVIRONMENT: development
      RESUME_API_SERVER_HOST: 0.0.0.0
      RESUME_API_SERVER_PORT: 8080
      RESUME_API_DATABASE_HOST: db
      RESUME_API_DATABASE_PORT: 5432
      RESUME_API_DATABASE_NAME: resume_api_dev
      RESUME_API_DATABASE_USER: dev
      RESUME_API_DATABASE_PASSWORD: devpass
      RESUME_API_DATABASE_SSL_MODE: disable
      RESUME_API_LOGGING_LEVEL: debug
      RESUME_API_REDIS_HOST: redis
      RESUME_API_REDIS_PORT: 6379
      RESUME_API_REDIS_ENABLED: "true"
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - resume-network
    restart: unless-stopped

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: resume-api-db
    environment:
      POSTGRES_DB: resume_api_dev
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: devpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d resume_api_dev"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - resume-network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: resume-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - resume-network
    restart: unless-stopped

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: resume-api-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - resume-network
    profiles:
      - admin  # Only start with: docker-compose --profile admin up
    restart: unless-stopped

networks:
  resume-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
